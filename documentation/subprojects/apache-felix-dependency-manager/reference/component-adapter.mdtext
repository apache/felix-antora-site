Title: Dependency Manager - Adapter

Adapters, like [aspects](component-aspect.html), are used to "extend" existing services, and can publish different services based on the existing one. An example would be implementing a management interface.

An adapter will be applied to any service that matches the specified interface and filter. For each matching service an adapter will be created based on the adapter implementation class. The adapter will be registered with the specified interface and existing properties from the original service plus any extra properties you supply here. It will also inherit all dependencies, and if you declare the original service as a member it will be injected.

## Usage example using API

Here is a sample showing a HelloServlet adapter component which creates a servlet each time a HelloService is registered in the osgi service registry with the "foo=bar" service property.
 
    :::java
    public class Activator extends DependencyActivatorBase {
        &Override
         public void init(BundleContext context, DependencyManager dm) throws Exception {
             Component adapterComponent = createAdapterComponent()
                 .setAdaptee(HelloService.class, "(foo=bar)")
                 .setInterface(HttpServlet.class.getName(), null)
                 .setImplementation(HelloServlet.class);
             dm.add(adapterComponent);
         }
    }
 
    public interface HelloService {
        String sayHello();
    }
 
    public class HelloServlet extends HttpServlet {
        volatile HelloService adatpee; // injected
     
        void doGet(HttpServletRequest req, HttpServletResponse resp) {
            ...
            resp.getWriter().println(adaptee.sayHello());
        }
    }

## Example using Lambda API

Same example using the Dependency Manager Lambda API:

    :::java
    public class Activator extends DependencyManagerActivator {
       public void init(BundleContext ctx, DependencyManager dm) throws Exception { 
           adapter(HelloService.class, adapt -> adapt.impl(HelloServlet.class).filter("(foo=bar)").provides(HttpServlet.class));                    
       }
    }

## Example using annotations

Same example using Dependency Manager Annotations:

    :::java
    @AdapterService(adapteeService = HelloService.class, adapteeFilter = "(foo=bar)")
    public class HelloServlet extends HttpServlet {
        volatile HelloService adatpee; // injected
     
        void doGet(HttpServletRequest req, HttpServletResponse resp) {
            ...
            resp.getWriter().println(adaptee.sayHello());
        }
    }


### Annotation attributes:

----
**`adapteeService`**    
*Required*: True    
*Default*: --

Sets the adaptee service interface this adapter is applying to.

----
**`provides`**    
*Required*: False    
*Default*: all directly implemented interfaces.

Sets the adapter service interface(s). By default, the directly implemented 
interface(s) is (are) used. 

----
**`properties`**    
*Required*: False    
*Default*: All inherited adaptee service properties.

Sets some additional properties to use with the adapter service registration. 
By default, the adapter will inherit all adaptee service properties.

----
**`adapteeFilter`**    
*Required*: False    
*Default*: --

Sets the filter condition to use with the adapted service interface.

----
**`factoryMethod`**    
*Required*: False    
*Default*: --

Sets the static method used to create the adapter service implementation 
instance. By default, the default constructor of the annotated class is used.




