translation_pending: true
Title: apache-felix-ipojo-successstories


# iPOJO Success Stories
*On this page, you will find comments from industrial users of iPOJO. They come from different domains such as home gateways, mobile phones, or enterprise applications.*

<a id="schneider"></a>
<blockquote>
Over 90% of processors are now used for embedded applications. At Schneider Electric we believe that java is a fantastic opportunity to develop some of our applications faster and better. OSGi is an excellent way to ensure that developed java software comes with built-in best practices such as reusability, high cohesion, loose coupling, high flexibility and dynamism.But we definitely don't want our anticipation teams to spend more time on OSGi mechanisms than on Energy Management, our core business! iPOJO helps us to develop quickly, by making developing modules as simple as writing plain old java. We also use it for our open source OSGi DPWS Base Driver ('SOA for devices' forge, on <a href="http://forge.soa4d.org/">http://forge.soa4d.org/</a>). And it's not just about us: partners of the SOA4D forge are using it, too.
</blockquote>
<cite>— Sylvain Marie, Software Architect, Schneider Electric</cite>
  
<hr/>  

<a id="ugasp"></a>
<blockquote>
Ubiquitous Multi-player games are one of next trends of mobile games. This type of games offers new experience: users interact with the real world and with the virtual world at the same time! So, player actions such as moves, interactions with smart objects or others players impact the virtual part of the game. The state of the virtual games also impacts the possibilities in the physical part of the games. 
Creating this kind of games requires managing several types of technologies such as embedded devices (mobile phones, PDA, sensors...), smart objects (RFID, environmental sensors...) and network connectivity (GSM, Edge, 3G, Wifi, Bluetooth...). uGasp (Ubiquitous Gaming Services Platform) is a middleware used to execute ubiquitous multi-player games. It provides an abstraction layer hiding the inherent complexity of such games. uGasp is a major evolution of the Gasp framework using a monolithic stack not suitable to embedded devices. To tackle this issue, we adopted a dynamic, modular, extensible and configurable architecture. But in order to speed up the development, uGasp is based on a service -oriented component model offering all the features "for free" and simplifying the development of dynamic applications. uGasp is based on
Apache Felix and iPOJO. We chose iPOJO for several reasons: 
<ul>
	<li>iPOJO drastically simplifies the development of OSGi-based applications. The intuitive XML description is really simple to use even for a novice developer.</li>
	<li>iPOJO allows reusing a lot of object-oriented code thanks to the field injection. So, migrating GASP to uGASP takes only three weeks!</li>
	<li>The factory principles offered by iPOJO allows creating several games instance at the same time.</li>
	<li>Finally, the isolation characteristic was a critical requirement in the uGasp middleware. Moreover, for the developer point of view, this is completely hidden.</li>
</ul>
To get more info about uGasp, visit our <a href="http://gasp.objectweb.org/ubiquitous-osgi-middleware.html">web site</a> or contact <a href="http://www.ubidreams.com">Ubidreams</a>.
</blockquote>
<cite>— Romain Pellerin, Ubidreams CEO</cite>
  
<hr/>

<blockquote>
JOnAS is a Java EE server developed inside the OW2 consortium. It embraces the new trend of modular and dynamic application servers and aims at implementing the entire Java EE specification by re-using third-part components. JOnAS also focuses on providing a great flexibility for the developer, for the administrator and for clustering.

To enable this flexibility and dynamism in the application server components' integration, the JOnAS team chose to rely on an OSGi runtime. However, it quickly appeared that any manual management of the dynamism would be too expensive: not only very few programmers understand the complexity of the dynamism, but also manual maintaining is extremely difficult and error-prone. That's why JOnAS uses a service-oriented component model. 

We first chose iPOJO because this technology sounded really promising. Moreover, iPOJO is able to evolve against new requirements, thanks to the handler-based extensibility model it promotes.

In the JOnAS application server all the technical services are implemented by iPOJO components. Thanks to this framework, they are pluggable and upgradeable on-demand. As iPOJO reduces drastically the impact on the code, we have reused the high majority of our code and the migration from the former JOnAS to this one has been surprisingly quick. The JOnAS team is very happy with iPOJO, and will go on using, promoting and improving it.

If you want more info on JOnAS visit our <a href="http://wiki.jonas.objectweb.org/xwiki/bin/view/Main/WebHome">website</a>.
</blockquote>
<cite>— Guillaume Sauthier, JOnAS Application Server Developer</cite>
  

<div class="alert alert-info">
<b>Are you also using iPOJO ?</b><br/>
You are using iPOJO, and you want to be listed there to tell how you are using iPOJO. Feel free to send us <a href="mailto:clement@apache.org">a mail</a> with your story.
</div>

  
  
  
  
