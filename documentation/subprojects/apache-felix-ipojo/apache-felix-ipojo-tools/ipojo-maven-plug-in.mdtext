translation_pending: true
Title: iPOJO Maven Plug-in

{include:apache-felix-ipojo-header}

<div class="content">

# How to use the iPOJO Maven Plug-in

{div:class=toc}
[TOC]
{div}

## Basic configuration

To use the iPOJO Maven plug-in, edit the following pom.xml (replace all $XXX elements):
{div:class=pom}
<project>
&nbsp;<modelVersion>4.0.0</modelVersion>

&nbsp;<packaging>bundle</packaging> <!-- Use the BND Maven plug-in -->
{color:red}&nbsp;{color} {color:red}<groupId>$YOUR*GROUP*ID</groupId>{color}
{color:red}&nbsp;{color} {color:red}<artifactId>$YOUR*ARTIFACT*ID</artifactId>{color}
{color:red}&nbsp;{color} {color:red}<version>$YOUR*ARTIFACT*VERSION</version>{color}
{color:red}&nbsp;{color} {color:red}<name>$YOUR*PROJECT*NAME</name>{color}

{color:red}&nbsp;{color} {color:red}<dependencies>{color}
{color:red}&nbsp;&nbsp;&nbsp;{color} {color:red}$YOUR*MAVEN*DEPENDENCIES{color}
{color:red}&nbsp;{color} {color:red}</dependencies>{color}

&nbsp;<build>
&nbsp;&nbsp;&nbsp;<plugins>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!-- BND Maven Plugin Configuration -->
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<plugin>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<groupId>org.apache.felix</groupId>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<artifactId>maven-bundle-plugin</artifactId>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <extensions>true</extensions>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <configuration>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <instructions>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <Bundle-SymbolicName>$\{pom.artifactId}</Bundle-SymbolicName>
{color:red}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{color}{color:red}<Private-Package>$YOUR*PRIVATE*PACKAGE</Private-Package>{color}
{color:red}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{color}{color:red}<Export-Package>$YOUR*EXPORTED*PACKAGE</Export-Package>{color}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</instructions>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</configuration>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</plugin>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!-- iPOJO Maven Plugin Configuration : nothing to do -->
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<plugin>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<groupId>org.apache.felix</groupId>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<artifactId>maven-ipojo-plugin</artifactId>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<version>1.6.0</version>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<executions>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<execution>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<goal>ipojo-bundle</goal>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</execution>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</executions>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</plugin>
&nbsp;&nbsp;&nbsp;</plugins>
&nbsp;</build>
</project>
{div}
The iPOJO Maven Plug-in is generally used with the BND Maven Plug-in (more details here). However the two configurations are completely separated. So, you can use all BND Maven plug-in features. The iPOJO configuration section can be used as previously written without any changes. However it requires that your metadata file is either inside `src/main/ipojo` or inside the `src/main/resources` folder and named "metadata.xml".

## Execution

To manipulate your project, use the "*mvn clean install*" command. The output should be like:
{div:class=pom}
\[INFO\]({{ refs.info.path }}) Scanning for projects...
\[INFO\]({{ refs.info.path }}) \---------------------------------------------------------------------------\-
\[INFO\]({{ refs.info.path }}) Building Hello Client
\[INFO\]({{ refs.info.path }})&nbsp;&nbsp;&nbsp;task-segment: \[clean, install\]
\[INFO\]({{ refs.info.path }}) \---------------------------------------------------------------------------\-
\[INFO\]({{ refs.info.path }}) \[clean:clean\]
\[INFO\]({{ refs.info.path }}) Deleting directory D:\clement\workspaces\iPOJO-Dev\hello.client\target
\[INFO\]({{ refs.info.path }}) Deleting directory D:\clement\workspaces\iPOJO-Dev\hello.client\target\classes
\[INFO\]({{ refs.info.path }}) Deleting directory D:\clement\workspaces\iPOJO-Dev\hello.client\target\test-classes
\[INFO\]({{ refs.info.path }}) Deleting directory D:\clement\workspaces\iPOJO-Dev\hello.client\target\site
\[INFO\]({{ refs.info.path }}) \[resources:resources\]
\[INFO\]({{ refs.info.path }}) Using default encoding to copy filtered resources.
\[INFO\]({{ refs.info.path }}) Copying 1 resource
\[INFO\]({{ refs.info.path }}) \[compiler:compile\]
\[INFO\]({{ refs.info.path }}) Compiling 1 source file to D:\clement\workspaces\iPOJO-Dev\hello.client\target\classes
\[INFO\]({{ refs.info.path }}) \[resources:testResources\]
\[INFO\]({{ refs.info.path }}) Using default encoding to copy filtered resources.
\[INFO\]({{ refs.info.path }}) Resource directory does not exist: D:\clement\workspaces\iPOJO-Dev\hello.client\src\test\resources
\[INFO\]({{ refs.info.path }}) \[compiler:testCompile\]
\[INFO\]({{ refs.info.path }}) No sources to compile
\[INFO\]({{ refs.info.path }}) \[surefire:test\]
\[INFO\]({{ refs.info.path }}) No tests to run.
\[INFO\]({{ refs.info.path }}) \[bundle:bundle\]
\[INFO\]({{ refs.info.path }}) \[org.apache.felix.ipojo.:ipojo-bundle \{execution: default}\]
\[INFO\]({{ refs.info.path }}) Start bundle manipulation
\[INFO\]({{ refs.info.path }}) Metadata File : D:\clement\workspaces\iPOJO-Dev\hello.client\target\classes\metadata.xml
\[INFO\]({{ refs.info.path }}) Input Bundle File : D:\clement\workspaces\iPOJO-Dev\hello.client\target\hello.client-0.0.1.jar
\[INFO\]({{ refs.info.path }}) Bundle manipulation - SUCCESS
\[INFO\]({{ refs.info.path }}) \[install:install\]
\[INFO\]({{ refs.info.path }}) Installing D:\clement\workspaces\iPOJO-Dev\hello.client\target\hello.client-0.0.1.jar to D:\Dev\maven-repo\ipojo\example\hello.client\0.0.1\hello.client-0.0.1.jar
\[INFO\]({{ refs.info.path }}) \-----------------------------------------------------------------------\-
\[INFO\]({{ refs.info.path }}) BUILD SUCCESSFUL
\[INFO\]({{ refs.info.path }}) \-----------------------------------------------------------------------\-
\[INFO\]({{ refs.info.path }}) Total time: 9 seconds
\[INFO\]({{ refs.info.path }}) Finished at: Mon Aug 13 14:04:55 CEST 2007
\[INFO\]({{ refs.info.path }}) Final Memory: 6M/13M
\[INFO\]({{ refs.info.path }}) \-----------------------------------------------------------------------\-
{div}
## Configuration Options

You can configure the localization of the iPOJO metadata file as following:
{div:class=pom}
<plugin>
&nbsp;&nbsp;&nbsp; <groupId>org.apache.felix</groupId>
&nbsp;&nbsp;&nbsp; <artifactId>maven-ipojo-plugin</artifactId>
&nbsp;&nbsp;&nbsp; <version>1.6.0</version>
&nbsp;&nbsp;&nbsp; <executions>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <execution>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <goal>ipojo-bundle</goal>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <configuration>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{color:red}<metadata>ipojo/meta.xml</metadata>{color}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </configuration>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</execution>
&nbsp;&nbsp;&nbsp;</executions>
</plugin>
{div}
In the metadata element, you can specify your metadata file or directory. The given file path is relative to the root directory ("./ipojo/meta.xml"). If the specified location is a directory, all contained XML files will be used. By default, the plugin searches metadata files into the `src/main/ipojo` folder. If not found then it searches for `target/classes/metadata.xml` and `./metadata.xml`.

*Note:* The directory support was introduced in the `1.7.0` version. Previously only one metadata file was found.
*Compatibility:* Before the `1.7.0`, the set location was searched in all resource folders. This is no more supported because it's an anti-pattern.

The second option allows skipping annotations processing, by using the `ignoreAnnotations` element:
{div:class=pom}
<plugin>
&nbsp;&nbsp;&nbsp; <groupId>org.apache.felix</groupId>
&nbsp;&nbsp;&nbsp; <artifactId>maven-ipojo-plugin</artifactId>
&nbsp;&nbsp;&nbsp; <version>1.6.0</version>
&nbsp;&nbsp;&nbsp; <executions>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <execution>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <goal>ipojo-bundle</goal>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <configuration>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;{color:red}<ignoreAnnotations>true</ignoreAnnotations>{color}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </configuration>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</execution>
&nbsp;&nbsp;&nbsp;</executions>
</plugin>
{div}

You can also ignore embedded XML-Schemas to use external ones. To do so, add the `ignoreEmbeddedSchemas`. If set to `true`, the manipulator doesn't use embedded XML-Schemas:
{div:class=pom}
<plugin>
&nbsp;&nbsp;&nbsp; <groupId>org.apache.felix</groupId>
&nbsp;&nbsp;&nbsp; <artifactId>maven-ipojo-plugin</artifactId>
&nbsp;&nbsp;&nbsp; <version>1.6.0</version>
&nbsp;&nbsp;&nbsp; <executions>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <execution>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <goal>ipojo-bundle</goal>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <configuration>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;{color:red}<ignoreEmbeddedSchemas>true</ignoreEmbeddedSchemas>{color}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </configuration>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</execution>
&nbsp;&nbsp;&nbsp;</executions>
</plugin>
{div}


## Generate the skeleton of your iPOJO bundle
The maven-ipojo-plugin provides a way to generate the skeleton of your project. To generate this structure, just launch the following command:

    mvn org.apache.maven.plugins:maven-archetype-plugin:generate \
    -DarchetypeArtifactId=maven-ipojo-plugin \
    -DarchetypeGroupId=org.apache.felix \
    -DartifactId=ARTIFACT_NAME_OF_YOUR_PROJECT \
    -DgroupId=GROUP_ID_OF_YOUR_PROJECT \
    -DarchetypeVersion=VERSION_OF_YOUR_PROJECT \
    -DpackageName=PACKAGE_NAME

This command generates :
* a pom file (to update), 
* the src/main/java and src/main/resources folders, 
* the structure of your package name.

The generated project uses iPOJO annotation and is ready to be deployed.

<div class="info" markdown="1">
**Maven Archetype**
The maven-ipojo-plugin archetype generates a pom file using the latest released version of the maven-ipojo-plugin.
</div>

## Describing iPOJO configuration in the pom file
It is also possible to describe iPOJO components and instances inside the pom file (avoiding using a externalized file). The configuration can be described in the `metadata` attribute inside a CDATA block.
{div:class=pom}
<plugin>
&nbsp;&nbsp;	<groupId>org.apache.felix</groupId>
&nbsp;&nbsp;	<artifactId>maven-ipojo-plugin</artifactId>
&nbsp;&nbsp;	<version>1.6.0</version>
&nbsp;&nbsp;	<executions>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<execution>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		<goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<goal>ipojo-bundle</goal>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		</goals>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		<configuration>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<ignoreAnnotations>true</ignoreAnnotations>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			<metadata>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				<![CDATA[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				<ipojo
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 xsi:schemaLocation="org.apache.felix.ipojo http://felix.apache.org/ipojo/schemas/CURRENT/core.xsd"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 xmlns="org.apache.felix.ipojo">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 <component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					classname="org.apache.felix.ipojo.test.scenarios.component.LifecycleControllerTest"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					name="LFC-Test">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					<provides />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					<controller field="m_state" />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					<properties>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;						<property name="conf" field="m_conf" method="setConf" />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					</properties>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 </component>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 <component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					classname="org.apache.felix.ipojo.test.scenarios.component.LifecycleControllerTest"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					name="LFC-Test-Immediate" immediate="true" architecture="true">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					<provides />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					<controller field="m_state" />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					<properties>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;						<property name="conf" field="m_conf" method="setConf" />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;					</properties>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				 </component>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;				</ipojo>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;			   ]]>
&nbsp;&nbsp;&nbsp;			</metadata>
&nbsp;&nbsp;&nbsp;		</configuration>
&nbsp;&nbsp;&nbsp;	</execution>
&nbsp;&nbsp;	</executions>
</plugin>
{div}
  
  
  
  
{include:apache-felix-ipojo-footer}
