Title: Describing components

{include:apache-felix-ipojo-header}

<div class="content">


# Describing your iPOJO components

*This section describes the different features supported by iPOJO. This page aims to answer to the following question: "What can I write in my iPOJO component descriptor?"*

{div:class=toc}
[TOC]
{div}

## Core features
Core features are provided with the iPOJO runtime bundles. You can use it directly, as soon as the iPOJO runtime is deployed.
* [How to require a service]({{ refs.service-requirement-handler.path }})
* [How to publish and provide a service]({{ refs.providing-osgi-services.path }})
* [How to react to lifecycle state changes]({{ refs.lifecycle-callback-handler.path }})
* [How to description component configuration]({{ refs.configuration-handler.path }})
* [How to enable/disable instance introspection]({{ refs.architecture-handler.path }})
* [How to act on the instance state from the implementation]({{ refs.controller-lifecycle-handler.path }})

## Extensions
Extensions *extend* the iPOJO model to add a specific functionality. This is made thanks to the external handler mechanism. So before using one of these features, deploy the attached external handler.

* [How to receive and send events with the Event Admin]({{ refs.event-admin-handlers.path }})
* [How to reconfigure instances with JMX]({{ refs.ipojo-jmx-handler.path }})
* [How to implement an extender pattern]({{ refs.extender-pattern-handler.path }})
* [How to implement a whiteboard pattern]({{ refs.white-board-pattern-handler.path }})
* [How to wait for services and inject proxies]({{ refs.temporal-service-dependency.path }})

## A missing functionality ?
iPOJO component model is extensible. So, you can implement your own handler managing you specific requirement. Refer the handler development guide ([How to write your own handler]({{ refs.how-to-write-your-own-handler.path }})) for more details.
  
  
  
  
{include:apache-felix-ipojo-footer}